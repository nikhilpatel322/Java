#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = newNode;
    return newNode;
}

void insertEnd(struct Node** tail, int data) {
    struct Node* newNode = createNode(data);
    if (*tail == NULL) {
        *tail = newNode;
    } else {
        newNode->next = (*tail)->next;
        (*tail)->next = newNode;
        *tail = newNode;
    }
}

void insertBeginning(struct Node** tail, int data) {
    struct Node* newNode = createNode(data);
    if (*tail == NULL) {
        *tail = newNode;
    } else {
        newNode->next = (*tail)->next;
        (*tail)->next = newNode;
    }
}

void deleteNode(struct Node** tail, int key) {
    if (*tail == NULL) return;
    struct Node *curr = (*tail)->next, *prev = *tail;
    do {
        if (curr->data == key) {
            if (curr == *tail && curr->next == *tail) {
                free(curr);
                *tail = NULL;
            } else {
                prev->next = curr->next;
                if (curr == *tail) *tail = prev;
                free(curr);
            }
            return;
        }
        prev = curr;
        curr = curr->next;
    } while (curr != (*tail)->next);
    printf("Node with value %d not found.\n", key);
}

void display(struct Node* tail) {
    if (tail == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = tail->next;
    do {
        printf("%d ", temp->data);
        temp = temp->next;
    } while (temp != tail->next);
    printf("\n");
}

void freeList(struct Node** tail) {
    if (*tail == NULL) return;
    struct Node *curr = (*tail)->next, *temp;
    do {
        temp = curr;
        curr = curr->next;
        free(temp);
    } while (curr != (*tail)->next);
    *tail = NULL;
}

int main() {
    struct Node* tail = NULL;
    int choice, value;

    do {
        printf("\nCircular Linked List Operations:\n");
        printf("1. Insert at End\n");
        printf("2. Insert at Beginning\n");
        printf("3. Delete Node\n");
        printf("4. Display List\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert at end: ");
                scanf("%d", &value);
                insertEnd(&tail, value);
                break;
            case 2:
                printf("Enter value to insert at beginning: ");
                scanf("%d", &value);
                insertBeginning(&tail, value);
                break;
            case 3:
                printf("Enter value to delete: ");
                scanf("%d", &value);
                deleteNode(&tail, value);
                break;
            case 4:
                printf("Circular Linked List: ");
                display(tail);
                break;
            case 5:
                freeList(&tail);
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}
